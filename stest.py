import numpy as np

############################### 함수

def extracting(tau, E, P, obj):
    in_put = []
    out_put = []
    a = tau * (E-1)
    for i in range(a, len(obj)-P):
        b=[]
        for j in range(i-a, i+tau, tau):
            b.append(obj[j])
        in_put.append(b)
        out_put.append(obj[i+P])
    return np.array(in_put), np.array(out_put)


def SM(input_data, output_data, E):
    sm = 0
    for i in range(len(input_data)):
        temp = []
        for j in range(len(input_data)):
            temp.append(Dist(input_data[i], input_data[j], E))

        temp = np.array(temp)

        nonzerotemp = temp[np.nonzero(temp)]
        nonzerotemp.sort()

        for j in range(len(temp)):
            if nonzerotemp[0] == temp[j]:
                idx = j

        minDist = temp[idx]

        sm += np.abs(output_data[i] - output_data[idx]) / minDist
    #        print(format("%f th step minDist: %f, minIndex: %f, sm: %f") % (i, minDist, idx, sm))

    sm = 1 - sm / len(input_data)

    return sm


def Dist(x1, x2, E):
    dist = 0
    for i in range(0, E):
        dist += np.square(x1[i] - x2[i])

    return np.sqrt(dist)

################################################################## 코드 시작

# train에 학습할 데이터를 리스트로 만들어주세요.
train = [22000,7854,7556,15892,22000,18528,9614,12104,5161,11445,14225,22000,22000,22000,15067,22000,17739,5939,11519,9305,8060,8514,6853,9402,20290,13662,6778,6107,8860,6970,6078,8339,6929,7939,7496,5952,4593,16620,22000,12080,8794,7205,5646,8216,10874,9431,7784,6873,15306,16291,1295,11015,5098,15221,11020,2477,3024,5100,4274,3052,3564,3054,2774,8572,22000,13835,7101,6852,9078,9184,15578,5957,6213,6251,6867,7014,11516,15903,18243,6770,8340,10521,20159,17069,11036,19126,19809,12825,15073,12714,4030,6412,3460,4736,10097,6236,11933,4998,14160,8063,6464,7251,4495,7529,4969,15521,8479,4899,7957,7864,10125,11156,5838,7849,15752,6680,7675,22000,14925,16846,8800,6961,9039,6203,6895,12841,13259,6085,6396,4162,4323,10721,7498,15271,1734,6520,18980,5951,9275,12309,5348,5311,5480,9269,18253,13921,5079,9375,20500,7122,7353,13484,20500,15076,11034,16326,12061,11051,17068,9113,9028,18099,15099,13649,8214,5047,3695,6432,7570,3277,7372,5715,7899,8340,5196,8431,10043,8334,14225,9458,5983,6456,7446,18941,14908,13990,18577,18467,7171,14610,9685,7672,16604,9591,5156,5945,17188,14066,9027,11928,10473,15229,4593,6498,14505,12235,10134,12059,18069,4211,8296,19853,16614,8098,16811,13578,8048,11214,12075,15088,20500,20500,10503,8760,11515,11107,11819,13279,17037,20500,20500,17363,20500,17099,9313,12060,20500,20500,13795,14371,20500,16043,10969,11547,8279,9963,10447,13847,13916,18607,17927,20500,16202,9485,10723,13343,15653,16918,10671,11096,19446,16545,12359,19270,8714,9789,14068,16208,12511,15929,20500,19686,17941,15877,7405,7823,14107,12056,12590,11894,20500,20500,6892,8347,7839,10616,16661,16133,14159,8058,8528,10700,10420,12055,15851,20500,16532,8734,14319,13245,12637,20500,20500,19693,11334,11297,9199,9591,9928,17114,20500,18581,16512,16869,10317,7916,17892,5484,7287,6923,10136,19352,15038,6685,7058,8834,9487,13177,8018,8508,7018,8398,12219,8281,6026,10131,11520,6397,6771,13796,11352,11480,8306,8293,10114,17812,16137,8886,6133,7745,12318,15640]
# P는 예측하려고 하는 날의 수 입니다. 예를 들면 내일의 값을 예측하려고 하면 P = 1, 3일 뒤를 예측하려고 하면 P = 3
P = 1
f = open('test.txt', 'w')
for E in range(2, 11):
    for tau in range(1, 21):
        temp = []
        a1, a2 = extracting(tau, E, P, train)
        sm = SM(a1, a2, E)
        temp.append(tau)
        temp.append(E)
        temp.append(sm)
        print(format("E: %f, tau: %f, sm: %f") % (E, tau, sm))
        f.write(format("%f, %f, %f") % (E, tau, sm) + '\n')
f.close()
